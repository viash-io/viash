package io.viash.e2e.config_inject

import io.viash._

import org.scalatest.BeforeAndAfterAll
import org.scalatest.funsuite.AnyFunSuite
import java.nio.file.{Files, Paths, StandardCopyOption}

import io.viash.config.Config

import scala.io.Source
import io.viash.helpers.{IO, Exec}

class MainConfigInjectSuite extends AnyFunSuite with BeforeAndAfterAll {
  private val temporaryFolder = IO.makeTemp("viash_tester")

  val srcPath = Paths.get(getClass.getResource(s"/test_languages/").getPath())
  val destPath = temporaryFolder.resolve("inject_test")

  val tests = List(
    ("bash", "config.vsh.yaml", "#", "par_input='input.txt'"),
    ("python", "config.vsh.yaml", "#", "'input': r'input.txt'"),
    // ("r", "script.vsh.R", "//", "input = \"input.txt\""), // TODO add back when `viash config inject` works for inline configs or add separate config/script combo for R
    ("js", "config.vsh.yaml", "//", "'input': String.raw`input.txt`"),
    ("scala", "config.vsh.yaml", "//", "Some(\"\"\"input.txt\"\"\"),"),
    ("csharp", "config.vsh.yaml", "//", "input = @\"input.txt\""),
  )

  test("Prepare temporary folder") {
    destPath.toFile().mkdirs()
    TestHelper.copyFolder(srcPath, destPath)
  }

  for ((name, file, comment, expectedInputString) <- tests) {
    println(s"$name $file $expectedInputString")
    
    test(s"config inject works for $name") {
      // check source file exists
      val configFile = destPath.resolve(s"$name/$file")
      assert(configFile.toFile().exists, "Check dest config exists")

      val functionality = Config.read(configFile.toString()).functionality

      val scriptFile = destPath.resolve(s"$name/" + functionality.mainScript.get.path.get) // assume all of these things exist
      assert(scriptFile.toFile().exists, "Check dest script exists")

      // inject script
      TestHelper.testMain(
        "config", "inject",
        configFile.toString(),
      )

      assert(scriptFile.toFile().exists, "Check dest script still exists")

      val code = Source.fromFile(scriptFile.toString()).getLines().mkString("\n")
      assert(code.contains(s"$comment The following code has been auto-generated by Viash"), "Script has been injected with a Viash header")
      assert(code.contains(expectedInputString), "Script has a default value set for 'input'")
    }

  }

  override def afterAll(): Unit = {
    IO.deleteRecursively(temporaryFolder)
  }
}